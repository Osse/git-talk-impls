#!/usr/bin/python3

import zlib
import sys
import hashlib
import os

index = bytearray("DIRC", "utf8")

version = 2
index += version.to_bytes(length=4)

top = "./"
all_files = []
for (root, dirs, files) in os.walk(top, topdown=True):
    if ".git" in dirs:
        dirs.remove(".git")
    dir = root.removeprefix(top)
    all_files.extend([os.path.join(dir, f) for f in files])

all_files.sort()

index += len(all_files).to_bytes(length=4)

update = len(sys.argv) > 1 and sys.argv[1] == "update"

def write_entry(file) -> bytearray:
    entry = bytearray()

    with open(file, "rb") as f:
        data = f.read()
        obj_format = bytearray("blob %d\x00%s", "utf8")
        obj_data = obj_format % (len(data), data)

        sha1_hasher = hashlib.sha1()
        sha1_hasher.update(obj_data)
        checksum = sha1_hasher.digest()

    hex = checksum.hex()
    obj_dir = os.path.join(".git", "objects", hex[0:2])
    obj_path = os.path.join(obj_dir, hex[2:])

    if not os.path.exists(obj_path):
        os.makedirs(obj_dir, exist_ok = True)
        with open(obj_path, "wb") as obj:
            obj.write(zlib.compress(obj_data))

    s = os.lstat(file)

    ctime = int(s.st_ctime)
    mtime = int(s.st_mtime)

    entry += ctime.to_bytes(4)
    entry += int(int(s.st_ctime_ns) - ctime*int(1e9)).to_bytes(4)

    entry += mtime.to_bytes(4)
    entry += int(int(s.st_mtime_ns) - mtime*int(1e9)).to_bytes(4)

    entry += s.st_dev.to_bytes(4)
    entry += s.st_ino.to_bytes(4)

    mode = s.st_mode
    # entry += ((mode &0xffff)).to_bytes(2) # TODO break doc??
    entry += ((mode >> 16)).to_bytes(2)

    obj = 0b1000
    # 3 bit 0
    mode = 0o644
    entry += (obj << 12 | mode).to_bytes(2)

    entry += s.st_uid.to_bytes(4)
    entry += s.st_gid.to_bytes(4)
    entry += s.st_size.to_bytes(4)


    entry += checksum

    assume_valid = 0
    extended = 0
    stage = 0
    name_len = len(file) & 0b111111111111

    flags = (assume_valid << 15) | (extended << 14) | (stage << 13) | name_len

    entry += flags.to_bytes(2)

    entry += bytearray(file, "utf8")

    pad_len =  8 - (len(entry) % 8)
    entry += int(0).to_bytes(pad_len)

    return entry

for f in all_files:
    index += write_entry(f)

sha1_hasher = hashlib.sha1()
sha1_hasher.update(index)
checksum = sha1_hasher.digest()

index += checksum

with open(".git/index", "wb") as f:
    f.write(index)
